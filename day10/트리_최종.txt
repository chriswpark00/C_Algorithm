#include<stdio.h>
#include<stdlib.h>
typedef struct node {
	int data;
	struct node* left;
	struct node* right;
}n;

n* create(n* node, int data) {
	if (node == NULL) {
		// 붙일공간을 찾음!
		node = (n*)malloc(sizeof(n));
		node->data = data;
		node->left = NULL;
		node->right = NULL;
	}
	else { // 크기비교 
		if (node->data > data) { // 10 > 7
			node->left = create(node->left, data);
		}
		else {
			node->right = create(node->right, data);
		}
	}
	return node;
}

// 전위순회
void preorder(n* node) {
	if (node != NULL) {
		printf("%d ", node->data);
		preorder(node->left);
		preorder(node->right);
	}
}

//중위순회 
void inorder(n* node) {
	if (node != NULL) {
		inorder(node->left);
		printf("%d ", node->data);
		inorder(node->right);
	}
}

//후위순회
void postorder(n* node) {
	if (node != NULL) {
		postorder(node->left);
		postorder(node->right);
		printf("%d ", node->data);
	}
}

void del(n* node, int data) {
	n* c = node; //현재 
	n* p; // 그 이전 상태 
	while (c != NULL && c->data != data) {
		p = c;
		c = data < p->data ? p->left : p->right;
	}
	if (c == NULL) {
		printf("해당 데이터없음!\n");
		return;
	}
	if (c->left == NULL && c->right == NULL) { // 리프노드 
		if (p->left == c) {
			p->left = NULL;
		}
		else {
			p->right = NULL;
		}
	}
	else if (c->left == NULL || c->right == NULL) { // 하나의 서브트리를 가지는 경우 
		if (c->data==node->data){ // 삭제노드가 루트노드인경우 추가 
			if(c->left!=NULL){
				c->data=c->left->data;
				c->left=c->left->left;
				c->right=c->left->right;
			}
			else{
				c->data=c->right->data;
				c->left=c->right->left;
				c->right=c->right->right;
			}
		}
		else if (p->left == c) {
			c = c->left != NULL ? c->left : c->right;
			p->left = c;
			//자기의 자식을 자신으로 만들고,
			//[자기부모가 자신을 보도록 함]
		}
		else {
			c = c->left != NULL ? c->left : c->right;
			p->right = c;
		}
	}
	else { // 두개의 서브트리를 가지는 경우 
		n* subp = c;
		n* sub = c->right;
		while (sub->left != NULL) { // left가 NULL인 노드가 가장작은노드 
			subp = sub;
			sub = sub->left;
		}
		if (c == subp) { // while()이동이 없을때  
			// 한칸땡겨와서 붙이기!!
			c->right = sub->right;
		}
		else {
			//오른쪽서브트리에서 가장작기때문에 100% left 
			subp->left = sub->right;
			// 왼쪽끝까지 온 노드 (가장작은노드)에
			// 오른쪽자식이 붙어있을 가능성
			// ->사라질 본인자리에 오른쪽자식붙이기 
		}
		c->data = sub->data;
	}
}

int main() {

	n* root = NULL;
	int act;
	while (1) {
		printf("1.노드생성 2.전위순회 3.중위순회 4.후위순회 5.삭제 6.종료  ");
		scanf("%d", &act);
		if (act == 1) {
			int data;
			printf("정수입력: ");
			scanf("%d", &data);
			root = create(root, data);
		}
		else if (act == 2) {
			printf("전위순회: ");
			preorder(root);
			printf("\n");
		}
		else if (act == 3) {
			printf("중위순회: ");
			inorder(root);
			printf("\n");
		}
		else if (act == 4) {
			printf("후위순회: ");
			postorder(root);
			printf("\n");
		}
		else if (act == 5) {
			int data;
			printf("정수입력: ");
			scanf("%d", &data);
			del(root, data);
		}
		else {
			printf("종료\n");
			break;
		}
	}

	return 0;
}